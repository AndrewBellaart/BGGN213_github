---
title: "Class6"
format: pdf
---

## All about functions in R

Every function in R has at least 3 things:
-name (chosen by you)
-arguments (the inputs to your function)
-body

Today we will write a function to grade a class of student assignment scores.

First I will work with a simplified vector input where I know what the answer should be.

#Example input vectors

```{r}
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

```{r}
mean(student1)
```
How can we drop the lowest score?
```{r}
min(student1)
```

```{r}
which.min(student1)
```
These both give us the average with the lowest score dropped:
```{r}
mean(student1[-8])
mean(student1[-which.min(student1)])
```
```{r}
x <- student2
mean(x[-which.min(x)])

```

```{r}
mean(x, na.rm=TRUE)
```
```{r}
student3
```

We can "mask" the NA or change them to be zero. The rationale here is that if you dont do a hw you get zero points.

We can use the `is.na()` function to find where the missing homeworks are in the input vector
```{r}
x <- student2
is.na(student2)
```
```{r}
x[is.na(x)] <- 0
x
```

Let's put these pieces together to solve this.

```{r}
x <- student3
#Mask NA to be zero
x[is.na(x)] <- 0
#Find the mean dropping the lowest score
mean(x[-which.min(x)])
```

Turn this snippet into a function.

```{r}
grade <- function(x) {
  #Mask NA to be zero
x[is.na(x)] <- 0
#Find the mean dropping the lowest score
mean(x[-which.min(x)])
}
```

```{r}
grade(student1)
grade(student2)
grade(student3)
```

> Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: "https://tinyurl.com/gradeinput"

I need to read the gradebook CSV file

```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", 
                      row.names=1)
gradebook
```
```{r}
?apply
```

A very useful function that Barry is forcing up to use is the `apply` function. How do we usd it to take our new `grade()` function and apply it over the full gradebook?

```{r}
ans <- apply(gradebook, 1, grade)
ans
```
> Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

```{r}
which.max(ans)
```


> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

We are giong to use the `apply` function again here.

```{r}
which.min( apply(gradebook, 2, mean, na.rm=TRUE))
```

Let's mask the NA values to zero

```{r}
mask <- gradebook
mask[is.na(mask)] <- 0
mask
```

```{r}
which.min( apply(mask, 2, mean))
```

```{r}
apply(mask, 2, sum)
which.min(apply(mask,2,sum))
```

>Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

```{r}
cor(mask$hw5, ans)
```

```{r}
apply(mask, 2, cor, y=ans)
which.max(apply(mask, 2, cor, y=ans))
```

